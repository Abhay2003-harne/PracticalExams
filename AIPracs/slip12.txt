 Slip 12
 Q.1) Write a python program to generate Calendar for the given month and year?.
 Ans:
import calendar
 def generate_calendar(year, month):
 cal = calendar.monthcalendar(year, month)
 month_name = calendar.month_name[month]
 print(f"Calendar for {month_name} {year}:")
 # Print weekday names
 print("Mo Tu We Th Fr Sa Su")
 # Print each week
 for week in cal:
 week_str = ' '.join(str(day) if day != 0 else ' ' for day in week)
 print(week_str)
 # Input: Year and Month
 year = int(input("Enter the year: "))
 month = int(input("Enter the month (1-12): "))
 generate_calendar(year, month)
 Q.2)Write a Python program to simulate 4-Queens problem.
 Ans:
def print_chessboard(chessboard):
 for row in chessboard:
 print(" ".join(row))
 # Function to check if it's safe to place a queen at the given position
def is_safe(chessboard, row, col, n):
 # Check row on the left side
 for i in range(col):
 if chessboard[row][i] == 'Q':
 return False
 # Check upper diagonal on the left side
 for i, j in zip(range(row,-1,-1), range(col,-1,-1)):
 if chessboard[i][j] == 'Q':
 return False
 # Check lower diagonal on the left side
 for i, j in zip(range(row, n, 1), range(col,-1,-1)):
 if chessboard[i][j] == 'Q':
 return False
 return True
 # Recursive function to solve the Four Queens problem
 def solve_four_queens(chessboard, col, n):
 if col >= n:
 return True # All queens are placed
 for i in range(n):
 if is_safe(chessboard, i, col, n):
 chessboard[i][col] = 'Q' # Place a queen
 # Recur to place the rest of the queens
 if solve_four_queens(chessboard, col + 1, n):
 return True
 # If placing a queen doesn't lead to a solution, backtrack
 chessboard[i][col] = '.'
 return False # No solution exists
 # Main function to solve the Four Queens problem
 def main():
 n =4 #Sizeof the chessboard (8x8)
 chessboard = [['.' for _ in range(n)] for _ in range(n)]
if solve_four_queens(chessboard, 0, n):
 print("Solution to the Four Queens Problem:")
 print_chessboard(chessboard)
 else:
 print("No solution found.")
 if __name__ == '__main__':
 main()